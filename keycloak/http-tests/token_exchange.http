### Obtain tokens via Resource Owner Password Credentials Grant Flow
POST {{ISSUER}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

client_id={{CONFIDENTIAL_CLIENT_CLASSIC_WEB_APP}}&client_secret={{CONFIDENTIAL_CLIENT_CLASSIC_WEB_APP_SECRET}}&username={{USER_USERNAME}}&password={{USER_PASSWORD}}&grant_type=password&scope=profile+openid

> {%
    client.global.set("KC_ACCESS_TOKEN", response.body.access_token);
    client.global.set("KC_REFRESH_TOKEN", response.body.refresh_token);
%}

### Perform (internal-to-internal) token exchange with audience extension
# ensure token-exchange permission is configured for target client (acme-client-service-app) -> we must explicitly allow the source-client to use token-exchange
# currently Keycloak generates an access token AND refresh token by default. To only request an access token use requested_token_type=urn:ietf:params:oauth:token-type:access_token
# An ID token also generated by default (since the openid scope is included explicitly)
POST {{ISSUER}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:token-exchange&client_id={{CONFIDENTIAL_CLIENT_CLASSIC_WEB_APP}}&client_secret={{CONFIDENTIAL_CLIENT_CLASSIC_WEB_APP_SECRET}}&subject_token={{KC_ACCESS_TOKEN}}&audience={{CONFIDENTIAL_CLIENT_SERVICE}}&requested_token_type=urn:ietf:params:oauth:token-type:access_token

> {%
    client.global.set("XCHD_ACCESS_TOKEN", response.body.access_token);
    client.global.set("XCHD_REFRESH_TOKEN", response.body.refresh_token);
%}


### Perform (internal-to-internal) token exchange with scope extension
POST {{ISSUER}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:token-exchange&client_id={{CONFIDENTIAL_CLIENT_CLASSIC_WEB_APP}}&client_secret={{CONFIDENTIAL_CLIENT_CLASSIC_WEB_APP_SECRET}}&subject_token={{KC_ACCESS_TOKEN}}&audience={{CONFIDENTIAL_CLIENT_SERVICE}}&requested_token_type=urn:ietf:params:oauth:token-type:access_token&scope=openid+profile+email+phone

> {%
    client.global.set("XCHD_ACCESS_TOKEN", response.body.access_token);
    client.global.set("XCHD_REFRESH_TOKEN", response.body.refresh_token);
%}

### Perform (impersonation) token exchange with user switch
# ensure token-exchange permission is configured for target client (acme-client-service-app) -> we must explicitly allow the source-client to use token-exchange
# currently Keycloak generates an access token AND refresh token by default. To only request an access token use requested_token_type=urn:ietf:params:oauth:token-type:access_token
# An ID token also generated by default (since the openid scope is included explicitly)
POST {{ISSUER}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:token-exchange&client_id={{CONFIDENTIAL_CLIENT_CLASSIC_WEB_APP}}&client_secret={{CONFIDENTIAL_CLIENT_CLASSIC_WEB_APP_SECRET}}&subject_token={{KC_ACCESS_TOKEN}}&requested_subject=a27f947d-2be4-4532-bd5b-af574f2f6449&requested_token_type=urn:ietf:params:oauth:token-type:access_token

> {%
    client.global.set("XCHD_ACCESS_TOKEN", response.body.access_token);
    client.global.set("XCHD_REFRESH_TOKEN", response.body.refresh_token);
%}


### Perform custom token exchange with API Key: Translate an API key with into an access-token with an API-Gateway
POST {{ISSUER}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:token-exchange&client_id={{API_GATEWAY_CLIENT}}&client_secret={{API_GATEWAY_CLIENT_SECRET}}&api_key={{APIKEY}}&requested_token_type=access_token

> {%
    client.global.set("XCHD_ACCESS_TOKEN", response.body.access_token);
    client.global.set("XCHD_REFRESH_TOKEN", response.body.refresh_token);
%}